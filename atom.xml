<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Monotonically Increasing Happiness</title>
    <link href="https://heuna-kim.net/atom.xml" rel="self" />
    <link href="https://heuna-kim.net" />
    <id>https://heuna-kim.net/atom.xml</id>
    <author>
        <name>Heuna Kim</name>
        <email>ai@heuna-kim.net</email>
    </author>
    <updated>2021-02-18T00:00:00Z</updated>
    <entry>
    <title>Impression of using NixOS for 2.5 months</title>
    <link href="https://heuna-kim.net/posts/2021-02-18-Impression-NixOS.html" />
    <id>https://heuna-kim.net/posts/2021-02-18-Impression-NixOS.html</id>
    <published>2021-02-18T00:00:00Z</published>
    <updated>2021-02-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For a Berlin expat, between the last Christmas and the new year is always the best time for trying out a small project that I otherwise never make time to do it. This time I have built an acrylic lamp and installed NixOS on my laptop (Lenovo E495 - AMD Ryzen 7). Since then, I have been using it and the experience was quite satisfactory. I would like to share here what I have tried and what impression I have gotten as a 2.5-month-old baby user.</p>
<p>For reference, my NixOS configurations are <a href="https://github.com/hahey/nixos-config">here</a>.</p>
<h3 id="shortly-about-my-general-experiences-of-different-operating-systems">Shortly about my General Experiences of Different Operating Systems:</h3>
<p>I started using Unix-like variants in 2004 - the first one I tried was FreeBSD and Red Hat. Since 2006, I am using Linux-based systems only. I have used U/Ku/Xu-buntu (~ 2011) and switched to Mint (~2014), to Gentoo (~2017), and to Debian (~2020). At work, I have been using mostly Ubuntu, mainly due to the easier integration of the GPU acceleration with CUDA.</p>
<h2 id="pros">Pros</h2>
<h3 id="stress-free-installation">1. Stress-free Installation</h3>
<p>I somehow expected that the installation of NixOS would be as complicated as Gentoo or Arch but it was as easy and fast as Debian. I wanted to install it with a LUKS setup for the disk and specifying spaces for <code>/tmp</code> with <code>TMPFS</code> and <code>/var</code>. This is very simple to do in Debian stable but not in the current Ubuntu stable. It worked out all smooth and quick and I realized that I don’t need to reserve a few days for installing NixOS. If you are interested, you can find my bash script for partitioning with LUKS <a href="https://github.com/hahey/nixos-config/blob/main/luks-tmpfs-configure.sh">here</a>.</p>
<p>In general I felt that to install Gentoo I need to understand and configure every single detail. I can use most Debian-based distros out of the box and be agnostic about a lot of detailed setups. But it gets often too complicated if I want to customize the configurations here and there. With NixOS I was able to decide easily where on this spectrum I want to be throughout different stages of the installation.</p>
<h3 id="up-to-date-rolling-updates-and-package-build-and-managements-directly-from-a-github-repository">2. Up-to-date Rolling Updates and Package Build and Managements directly from a Github Repository</h3>
<ul>
<li>Installing graphic cards, touchpads, sound devices and any other hardware-related firmwares in NixOS was much easier for me than in Ubuntu or Debian. Especially for recent AMD-based laptops, it was quite a struggle with the current Debian stable, because its kernel only supports quite old firmwares.</li>
</ul>
<p>With the Nix language, I could also build a package from the sources with overriding specific arguments and this package can be still managed by the Nix package manager. It happened often to me that if I wanted to build a package with a different option than what’s supported from the package manager of some distro, then I had to clone the repository and build from the sources. Then it can be quite a problem to keep them up to date and I often ended up using a deprecated version for long without realizing. This problem is more or less resolved with the Nix package manager. It is also possible to update a package directly from a Github repository with an usual update command by specifying it in the Nix configuration.</p>
<ul>
<li><p>Installing the AMD GPU support <code>rocm</code> in Debian and Ubuntu was really a struggle – I tried to build it from the source but then it didn’t work for me either. But with NixOS it was a one-liner and worked without efforts.</p></li>
<li><p>The examples of other applications that I benefitted by using NixOS were <code>conky</code> and <code>MuseScore</code>. Both did some major upgrades and most of the major changes were not available in the package manager of some other stable distros. Also I was happy that the versions of Haskell ghc compilers are much more up to date in the Nix package manager.</p></li>
</ul>
<h3 id="centralized-and-modularized-management-of-all-rcdotfiles-and-user-specific-package-management-using-home-manager">3. Centralized and Modularized Management of All rc/dotfiles and User-Specific Package Management Using <code>Home Manager</code></h3>
<p>Officially <code>Home Manager</code> is still under development but I like it quite a lot. I have been using a shaky <a href="https://github.com/hahey/config">self-crafted rc/dotfile manager</a> for a few years by creating a centralized folder of those configuration files and a bash script for symbolic linking and updating them automatically. It got complicated because I was using by then 1) <code>zsh</code> with <code>powerline9k</code>, 2) <code>i3</code> with <code>polybar</code> and <code>rofi</code>, 3) <code>neovim</code>, 4) <code>conky</code> and 5) some customized <code>zsh</code> aliases for Python developments and SSH connections. It took quite some time to translate my rc/dotfiles to be compatible this the NixOS <code>Home Manager</code>. Fortunately I feel that they are now better structured and not based on deprecated options or dependencies. For example, <code>powerline9k</code> is also deprecated now.</p>
<h3 id="development-environment-with-nix-shell">4. Development Environment With <code>nix-shell</code></h3>
<p>I haven’t tried this for Python mainly because I don’t want to force other people to use Nix. All of the Python projects that I am now working on are collaborative projects. I mainly used <code>nix-shell</code> for Haskell. I like that I should specify the dependent Nix packages for Haskell packages in the development environment. This is helpful to test the build environment and not to keep all the packages for a specific build to the whole user environment. Otherwise one can also use <code>nix-env</code> to install them in the user environment.</p>
<h3 id="community-and-documentation">5. Community and Documentation</h3>
<p>The community is very active and most of the documentation is quite friendly and nice. Still I have the impression that many features and developments are evolving faster than the documentation. This is probably normal and I believe that it will settle in the near future.</p>
<h3 id="last-but-not-least-package-dependency-and-rollback">6. Last but not Least: Package Dependency and Rollback</h3>
<p>The package dependency tree is implemented by building derivations first by creating <code>*.drv</code> files and the outputs, stored in <code>/nix/store/</code> and by generating symlinks in <code>/nix/var/nix/gcroots/</code> to the ones in <code>/nix/store/</code>. Probably this symlink-based derivations for the package manager is the most distinctive feature of the Nix package manager.</p>
<p>I was able to observe interesting side effects thereof: for example a package A and a package B both have the dependency to a package C but they have different version requirements and it ends up that I have two different versions of C’ and C’’ in the same system.</p>
<p>I observed that this system made indeed the desktop manager and the default running component of the OS much more stable; less danger of crashing the whole system due to dependency conflicts. This was the main reason that I gave up on using Gentoo at some point.</p>
<p>After quasi-“compiling” the configuration with the Nix language, it creates a new version, while still keeping the old version for the rollback. These old versions will be removed only if I explicitly run a garbage collection. The <code>Home Manager</code> takes a similar approach.</p>
<h2 id="cons">Cons</h2>
<h3 id="compatibility">1. Compatibility</h3>
<p>It seems to me that in general this “Nix world” is not really compatible to the world outside.</p>
<ul>
<li><p>The package maintainers have to use their own Nix package manager to create a hash to update the package. I found this somewhat unfriendly for people outside of this religion. I am currently using some less popular geometry software and I saw the maintainer explicitly mentioned that it is not supported in the Nix package manager. I am considering to upload it by myself soon because it seems to be not so complicated.</p></li>
<li><p>All my user configuration files were not directly compatible with <code>Home Manager</code> and it took quite a while to convert them.</p></li>
<li><p>As mentioned before, I cannot use <code>nix-shell</code> when I collaborate in a programming project with other people.</p></li>
<li><p>Currently the support of <code>*.Appimage</code>, <code>*.deb</code> and <code>*.rpm</code> for NixOS is somewhat subtle. I was able to run <code>*.Appimage</code> for the note program <code>boostnote</code> that I am using. I was not able to run any <code>*.deb</code> or <code>*.rpm</code> files. Although they are intended only for the debian-based and RedHat-based package managers respectively, I was able to run them in Gentoo.</p></li>
</ul>
<h3 id="relatively-smaller-user-group-compared-to-debian-or-ubuntu-and-shorter-history">2. Relatively Smaller User Group compared to Debian or Ubuntu and Shorter History</h3>
<p>The user group is relatively small (bigger than Gentoo or void Linux by now) and most of users are quite advanced so it is hard to find an answer for somewhat trivial questions.</p>
<ul>
<li><p>I had troubles configuring triple monitors with <code>i3</code> in NixOS. I assume that this is probably due to an AMD-related graphic driver issue but I couldn’t find any useful information. Probably there are not many people who are using NixOS with <code>i3</code> with a recent AMD laptop.</p></li>
<li><p>While installing some package, I had some specific error to this package. I reported this issue quite some time ago. I haven’t gotten any replies yet.</p></li>
</ul>
<p>I imagine that I could have found solutions to these problems already if the Nix community were a bigger.</p>
<p>In any case, I have compiled this post with <code>nix-shell</code> on NixOS. I’m curios how it will develop further with time. Any feedbacks on my <a href="https://github.com/hahey/nixos-config">NixOS configuration</a> would also be appreciated.</p>]]></summary>
</entry>
<entry>
    <title>Dynamic Sidebar or Header Activation based on the Current Page in Hakyll</title>
    <link href="https://heuna-kim.net/posts/2020-11-19-Hakyll-Sidebar-Activation.html" />
    <id>https://heuna-kim.net/posts/2020-11-19-Hakyll-Sidebar-Activation.html</id>
    <published>2020-11-19T00:00:00Z</published>
    <updated>2020-11-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="situation">Situation</h2>
<p><a href="https://jaspervdj.be/hakyll/">Hakyll</a> is a haskell-based static site generator that is used to generate my blog. For the migration I ported <a href="https://github.com/poole/lanyon">Lanyon</a> theme designed for Jekyll to <a href="https://github.com/hahey/lanyon-hakyll">lanyon-hakyll</a> and here I describe one of the problems that I encountered.</p>
<p>The problem is an extension of what is described in this blog: <a href="http://mesokurtosis.com/posts/2015-02-22-pages.html">Hakyll, where am I?</a></p>
<p>The page that you are navigating will be linked to one in your sidebar or your header depending on your layout unless it is one of posts. It is possible to statically link each of such pages manually. But if this list of pages is dynamically generated by loading all pages in some folder (e.g. in the <code>pages</code> folder in <a href="https://github.com/hahey/lanyon-hakyll">lanyon-hakyll</a>), it gets somewhat more complicated in Hakyll for the following reason.</p>
<p>An example based on liquid syntax in ruby for such activation will look like (the excerpt from <a href="https://github.com/poole/lanyon/blob/master/_includes/sidebar.html">Lanyon</a>):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a>{% for node in pages_list %}</span>
<span id="cb1-2"><a href="#cb1-2"></a>    {% if node.title != null %}</span>
<span id="cb1-3"><a href="#cb1-3"></a>          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item{% if page.url == node.url %} active{% endif %}&quot;</span><span class="ot"> href=</span><span class="st">&quot;{{ node.url | absolute_url }}&quot;</span><span class="kw">&gt;</span>{{ node.title }}<span class="kw">&lt;/a&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>    {% endif %}</span>
<span id="cb1-5"><a href="#cb1-5"></a>{% endfor %}</span></code></pre></div>
<p>A direct translation of <code class="sourceCode html">{% if page.url == node.url %}</code> in Hakyll is not possible, because the control flow of Hakyll <code class="sourceCode html">$if(variable)$</code> does not evaluate the boolean value of <code>variable</code> but merely checks whether the key <code>variable</code> exists in the current context or not. Check out <a href="https://jaspervdj.be/hakyll/tutorials/04-compilers.html">this tutorial</a> for understanding the control flow of Hakyll templates.</p>
<h2 id="approaching-the-solution">Approaching the Solution</h2>
<p>We will dynamically generate this <code>constField</code> having the page title as a key in the context of <code>listField</code> with a key <code>pages_list</code>. First we add a snapshot to avoid a dependency cycle in compiling the <code>pages</code> folder:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a> match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="op">...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    pandocCompiler</span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">...</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></span></code></pre></div>
<p>Define the context containing such <code>listField</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="ot">sidebarCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>sidebarCtx nodeCtx <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>    listField <span class="st">&quot;pages_list&quot;</span> nodeCtx (loadAllSnapshots <span class="st">&quot;pages/*&quot;</span> <span class="st">&quot;page-content&quot;</span>) <span class="ot">`mappend`</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>    defaultContext</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="ot">baseNodeCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>baseNodeCtx <span class="ot">=</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>    urlField <span class="st">&quot;node-url&quot;</span> <span class="ot">`mappend`</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>    titleField <span class="st">&quot;title&quot;</span> <span class="ot">`mappend`</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>    baseCtx</span>
<span id="cb3-11"><a href="#cb3-11"></a></span>
<span id="cb3-12"><a href="#cb3-12"></a>baseSidebarCtx <span class="ot">=</span> sidebarCtx baseNodeCtx</span></code></pre></div>
<p>Add dynamically generated <code>constField</code> with the current page title.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">--- This is not enough.</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">import</span>           <span class="dt">System.FilePath</span>               (takeBaseName)</span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a>match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>    compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>        pageName <span class="ot">&lt;-</span> takeBaseName <span class="op">.</span> toFilePath <span class="op">&lt;$&gt;</span> getUnderlying</span>
<span id="cb4-8"><a href="#cb4-8"></a>        <span class="kw">let</span> pageCtx <span class="ot">=</span> constField pageName <span class="st">&quot;&quot;</span> <span class="ot">`mappend`</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>                      baseNodeCtx</span>
<span id="cb4-10"><a href="#cb4-10"></a>        <span class="kw">let</span> activeSidebarCtx <span class="ot">=</span> sidebarCtx pageCtx</span>
<span id="cb4-11"><a href="#cb4-11"></a></span>
<span id="cb4-12"><a href="#cb4-12"></a>        pandocCompiler</span>
<span id="cb4-13"><a href="#cb4-13"></a>            <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>            <span class="op">...</span></span>
<span id="cb4-15"><a href="#cb4-15"></a>            <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (activeSidebarCtx <span class="op">&lt;&gt;</span> siteCtx)</span>
<span id="cb4-16"><a href="#cb4-16"></a>            <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>The translation of the above html layout will be similar to:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">&lt;!-- THIS DOES NOT WORK --&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>$for(pages_list)$</span>
<span id="cb5-3"><a href="#cb5-3"></a>    $if(title)$</span>
<span id="cb5-4"><a href="#cb5-4"></a>          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item$if($title$)$ active$endif$&quot;</span><span class="ot"> href=</span><span class="st">&quot;$baseurl$$node-url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>    $endif$</span>
<span id="cb5-6"><a href="#cb5-6"></a>$endfor$</span></code></pre></div>
<p>As you see in the comment, this is not enough because inside of <code class="sourceCode html">$if(...)$</code> syntax, you cannot evaluate the key by surrounding them with <code>$</code>.</p>
<h2 id="solution">Solution</h2>
<p>We can add <code>functionField</code> for evaluating a key for a given context. The <code>functionField</code> needs a function with a type <code>[String] -&gt; Item String -&gt; Compiler String</code>.</p>
<p>We define the following <code>evalCtxKey</code> function for this purpose:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="ot">evalCtxKey ::</span> <span class="dt">Context</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>evalCtxKey context [key] item <span class="ot">=</span> (unContext context key [] item) <span class="op">&gt;&gt;=</span> \cf <span class="ot">-&gt;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>        <span class="kw">case</span> cf <span class="kw">of</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>            <span class="dt">StringField</span> s <span class="ot">-&gt;</span> <span class="fu">return</span> s</span>
<span id="cb6-5"><a href="#cb6-5"></a>            _             <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="op">$</span> <span class="st">&quot;Internal error: StringField expected&quot;</span></span></code></pre></div>
<p>Just if you need, you can also access the meta data as follows:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="ot">getMetadataKey ::</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>getMetadataKey [key] item <span class="ot">=</span> getMetadataField&#39; (itemIdentifier item) key</span></code></pre></div>
<p>The functions <code>unContext</code>, <code>getMetadataField'</code>, and data <code>itemIdentifier</code> are already defined in Hakyll.</p>
<p>The following is the working version of compiling <code>pages/*</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource haskell numberLines"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a>match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>    compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>        pageName <span class="ot">&lt;-</span> takeBaseName <span class="op">.</span> toFilePath <span class="op">&lt;$&gt;</span> getUnderlying</span>
<span id="cb8-5"><a href="#cb8-5"></a>        <span class="kw">let</span> pageCtx <span class="ot">=</span> constField pageName <span class="st">&quot;&quot;</span> <span class="ot">`mappend`</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>                      baseNodeCtx</span>
<span id="cb8-7"><a href="#cb8-7"></a>        <span class="kw">let</span> evalCtx <span class="ot">=</span> functionField <span class="st">&quot;eval&quot;</span> (evalCtxKey pageCtx)</span>
<span id="cb8-8"><a href="#cb8-8"></a>        <span class="kw">let</span> activeSidebarCtx <span class="ot">=</span> sidebarCtx (evalCtx <span class="op">&lt;&gt;</span> pageCtx)</span>
<span id="cb8-9"><a href="#cb8-9"></a></span>
<span id="cb8-10"><a href="#cb8-10"></a>        pandocCompiler</span>
<span id="cb8-11"><a href="#cb8-11"></a>            <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>            <span class="op">...</span></span>
<span id="cb8-13"><a href="#cb8-13"></a>            <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (activeSidebarCtx <span class="op">&lt;&gt;</span> siteCtx)</span>
<span id="cb8-14"><a href="#cb8-14"></a>            <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>and the sidebar layout:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1"></a>$for(pages_list)$</span>
<span id="cb9-2"><a href="#cb9-2"></a>    $if(title)$</span>
<span id="cb9-3"><a href="#cb9-3"></a>          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item$if(eval(title))$ active$endif$&quot;</span><span class="ot"> href=</span><span class="st">&quot;$baseurl$$node-url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>    $endif$</span>
<span id="cb9-5"><a href="#cb9-5"></a>$endfor$</span></code></pre></div>
<p>If you want to look at an example code, please check out <a href="https://github.com/hahey/lanyon-hakyll">the codes of lanyon-hakyll</a>.</p>]]></summary>
</entry>
<entry>
    <title>Berlin Machine Learning Seminar - Examples of Reinforcement Learning Applications in the Financial Market</title>
    <link href="https://heuna-kim.net/posts/2020-10-22-BMLSeminar-RL-in-finance.html" />
    <id>https://heuna-kim.net/posts/2020-10-22-BMLSeminar-RL-in-finance.html</id>
    <published>2020-10-22T00:00:00Z</published>
    <updated>2020-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have given this talk on 22nd October 2020 at 19:00 to Berlin Machine Learning Seminar with the following abstract.</p>
<h3 id="abstract">Abstract:</h3>
<blockquote>
<p>Reinforcement Learning has been broadly employed in financial markets for the last few years by benefiting from its nature of combining the behavior optimization (in this case buy and sell) and the market prediction. We will first discuss the hierarchical reinforcement learning scheme deployed by JPMorgan (<a href="https://arxiv.org/abs/1811.09549">arXiv</a>, NIPS Workshop 2018) and then take a look at other two examples of DRL applied in trading. The first one (<a href="https://arxiv.org/abs/1908.02646">arXiv</a>, KDD 2019) is implementing an interpretable network that works similar to a traditional trading strategy (Buying-Winners-and-Selling-Losers). The second one (<a href="https://arxiv.org/pdf/1906.11046">arXiv</a>, ICML 2019) is extending a traditional mathematical model (the Almgren and Chriss model) to a multi-agent setting in order to optimize a liquidation strategy.</p>
</blockquote>
<p>The slides: <a href="https://github.com/hahey/Talks/blob/main/Berlin_Machine_Learning_Seminar_20201022/BML_RLTrading_hkim.pdf">here</a></p>
<p>Please contact me if you have any followup questions.</p>
<p>You can find my other technical talks in the github repo <a href="https://github.com/hahey/Talks">hahey/Talks</a>.</p>]]></summary>
</entry>
<entry>
    <title>Helping Junior Data Scientists with Prepare for Interviews and Find Jobs</title>
    <link href="https://heuna-kim.net/posts/2020-10-16-Helping-Junior-Data-Scientists.html" />
    <id>https://heuna-kim.net/posts/2020-10-16-Helping-Junior-Data-Scientists.html</id>
    <published>2020-10-16T00:00:00Z</published>
    <updated>2020-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>From 2019 to 2020 for two semesters, I participated in the course “data analytics for Python”, organized by <a href="https://www.redi-school.org/berlin">ReDI School Berlin</a> as a teacher. During the second semester, I started mentoring one of the students. In particular I helped him apply for data-science-related jobs. I also had many more chances to actively help some other friends, who want to become data scientists as fresh graduates. In the first part of this blog, I would like to share my impression of the current job market based on their experiences. The second part is a revised version of the email that I sent to my ReDI School mentee in October 2020. It contains tips about interview preparation for fresh data scientists, who are starting their careers.</p>
<h2 id="part-1-current-job-market-for-junior-data-scientists-compared-to-3-5-years-ago">Part 1: Current Job Market for Junior Data Scientists Compared to 3-5 Years Ago</h2>
<p>These are three of my observations compared to 3-5 years ago:</p>
<ul>
<li>More companies know better what they want from and can expect from data scientists.</li>
<li>Most positions require a narrower range of skills, that are more specialized according to their job descriptions.</li>
<li>There are many more people who want to start careers in data science and companies want mostly only experienced data scientists.</li>
</ul>
<p>A friend of mine who recently started as a junior data scientist told me a story: her uncle told her that as a data scientist she could just position herself as a team lead or a senior data scientist and easily demand a higher salary, because one cannot find many data scientists out there. It is somewhat true that the titles for data-science-related jobs are generally inflated compared to other technical positions. It is probably because 1) the field is new so there are not many experienced people and 2) many of those people spent longer in education. On the other hand, the supply of candidates in the data-science-related job market has drastically increased and her uncle’s statement is no longer true. 3-5 years ago people with experience of quantitative experiments and coming from diverse backgrounds, for example, psychology or politics, could get data science positions more easily than now.</p>
<p>For the past few months, also probably with the combination of the current pandemic situation, many friends have told me that over 100 applicants are shown on LinkedIn job advertisements for most junior data scientist positions. Also the requirements for most of these positions have become more clear and specialized in the last 3-5 years. For example: big data experts, data engineers, machine learning scientists, data analysts, geo-spatial engineers, reinforcement learning experts, computer vision specialists, natural language specialists, data scientists for recommendation engines or for price forecasting, and so on; they are now more clearly distinguished from each other. I no longer see ‘Hadoop’, ‘Tableau’, ‘R’, ‘tensorflow’ and ‘SQL’ all in the same job description. It used to be the case 3-5 years ago.</p>
<p>Most job descriptions nowadays clarify the companies’ projects more specifically. Also these descriptions match the companies’ interests better. I can see that it has got harder for those who are starting out on their data science careers now. But also while looking at those job descriptions, I imagine that they can probably improve on their skills faster in more focused working environments.</p>
<h2 id="part-2-as-promised-interview-preparation-tips">Part 2: As promised, interview preparation tips</h2>
<p>This is a revised version of an email to my mentee with the same title. Hence I should mention that this is not a complete list for interview preparation. Nevertheless I hope that this list is helpful to fresh job seekers in data science.</p>
<h3 id="interview-question-lists-on-the-internet">1. Interview Question Lists on the Internet</h3>
<p>There are some lists of typical interview questions on the Internet. Be aware that many of the answers from those lists are not precisely correct. Also some of them are outdated and fit better to the job market 3-5 years ago. I believe that it is probably not necessary to go through all of these lists. Nevertheless, I think it is worthwhile skimming them quickly and checking which topics you should get more familiarized with.</p>
<ul>
<li>Here are some examples: <a href="https://www.kdnuggets.com/2016/02/21-data-science-interview-questions-answers.html">1</a> <a href="https://towardsdatascience.com/top-30-data-science-interview-questions-7dd9a96d3f5c">2</a> <a href="https://www.simplilearn.com/tutorials/data-science-tutorial/data-science-interview-questions">3</a>.</li>
<li>You can find some more on GitHub as well: <a href="https://github.com/alexeygrigorev/data-science-interviews/blob/master/theory.md">1</a> <a href="https://github.com/kojino/120-Data-Science-Interview-Questions">2</a>.</li>
</ul>
<h3 id="useful-books">2. Useful Books</h3>
<p>It is often most recommended to read <a href="https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/">Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron</a> for quickly refreshing your knowledge before data science and machine learning related interviews.</p>
<p>If this book is too difficult for you, my suggestion for an easier book would be <a href="https://www.statlearning.com/">An Introduction to Statistical Learning with Applications in R</a>. (You can download the free PDF file from the official website.) All the codes are in R in this book and these days R is used less and less in industry so I actually recommend this book only for the basic-level non-practical purpose.</p>
<h3 id="sqldatabase-software-engineering-design-patterns-object-oriented-programming-concepts-big-data-hadoop-kafka-cloud-aws-azure-..">3. SQL/Database, Software Engineering, Design Patterns, Object-oriented Programming Concepts, Big data (Hadoop, Kafka), Cloud (AWS, Azure, ..)</h3>
<p>These topics are very broad on their own. Also I would regard them less as core skills for data-science-related jobs except for data engineers. Prepare these topics mainly by focusing on the job requirements of each specific position that you are interested in.</p>
<ul>
<li>Some more tips:
<ul>
<li>If you want to evaluate your SQL skills, check out the SQL section in <a href="https://leetcode.com/">leetcode</a> with the easy mode. -Understanding and reviewing important Git commands is also a good idea if you are preparing these topics.</li>
</ul></li>
</ul>
<p>You can find some of my notes on these topics at the end of this blog post.</p>
<h3 id="study-your-own-cv">4. Study your own CV</h3>
<p>This is probably the most important part. In interviews, you will be potentially asked about anything written in your CV. Prepare to answer any questions confidently about your CV. In other words, I would recommend not writing keywords that you cannot explain well.</p>
<h3 id="keywords-for-you-should-know-topics">5.Keywords for You-Should-Know Topics</h3>
<p>Here I added a list of general important keywords; in my opinion, an applicant of a data scientist position is expected to know these concepts. Please try to cover:</p>
<ul>
<li>Machine Learning
<ul>
<li>Differences between Supervised Learning / Unsupervised Learning / Reinforcement Learning, differences between generative and discriminative models, differences between batch and online learning</li>
<li>Differences between Overfitting / Underfitting, concepts of bias-variance dilemma, splitting training / validation / test set, cross-validation</li>
<li>Examples of regression methods, metrics, differences between Ridge, Lasso, Elastic Net and why you want to use them</li>
<li>Examples of classification methods, metrics (precision and recall, type I/II errors, confusion matrix, ROC, AUC), when to use Support Vector Machines (SVM) vs. when to use Random Forests, the kernel trick for SVM</li>
<li>Examples of different ensemble techniques: bagging, boosting, stacking, when to apply them and their effects</li>
<li>Examples of clustering methods</li>
<li>The chain rule in Calculus, concepts of Stochastic Gradient Descent and backpropagation, the mechanism of activation functions (ReLU, Sigmoids) / convolutional-units / pooling, regulation methods (dropout, batch normalization, skipping connection) for Neural Networks</li>
<li>Difference between feed forward networks and recurrent networks and their examples</li>
<li>the concept of Principal Component Analysis and autoencoder for dimension reduction</li>
</ul></li>
</ul>
<p>It is good to know when to use these advanced topics below. It is relatively less expected for a junior data scientist to know them:</p>
<ul>
<li><p>Sampling (MCMC, Gipps, Metropolis Hastings…), Expectation Maximization, Gaussian Process, General Adversarial Network, Conditional Random Field / Hidden Markov Model / Kalman filter, Autoregression / ARIMA (Time Series), Matrix Factorization, Collaborative Filtering, Graphical Models, Variational Inference, Topic modeling and Latent Dirichlet Allocation, Variants of Seq2seq models, Restricted Boltzmann Machine, Reinforcement-Learning-related topics</p></li>
<li><p>Python</p>
<ul>
<li>List comprehensions, generators/iterators, decorators</li>
<li>(Advanced: context managers, properties, coroutines, closures)</li>
<li>Sometimes you are asked to implement very simple codes for the concepts above e.g. max pooling or cross-validation, ReLU, a stride for a convolutional neural network</li>
</ul></li>
</ul>
<h3 id="notes-for-3.">6. Notes for 3.</h3>
<p>Theses notes are handwritten and not written for explaining the concept but as a summary. It is probably hard to learn everything from the notes only by reading them. Still you can hopefully capture important keywords or use them for reference or for refreshing what you have learned already.</p>
<ul>
<li><p>SQL <img src="/images/IMG_20201016_SQL1.jpg" alt="SQL1" /> <img src="/images/IMG_20201016_SQL2.jpg" alt="SQL2" /></p></li>
<li><p>Objected-oriented Programming <img src="/images/IMG_20201016_OOP.jpg" alt="OOP" /></p></li>
<li><p>Algorithms <img src="/images/IMG_20201016_Algorithm.jpg" alt="Algorithm" /></p></li>
<li><p>Design Patterns <img src="/images/IMG_20201016_Design_patterns.jpg" alt="Design Patterns" /></p></li>
</ul>
<h4 id="i-wish-you-the-best-for-your-job-hunting-you-can-reach-me-via-aiheuna-kim.net-if-you-want-to-share-your-opinions-with-me-or-have-any-questions.">I wish you the best for your job hunting! You can reach me via ai@heuna-kim.net if you want to share your opinions with me or have any questions.</h4>]]></summary>
</entry>
<entry>
    <title>Migrated Notes and the Webpage Using Hakyll</title>
    <link href="https://heuna-kim.net/posts/2020-09-14-Hakyll-Blog-Migration.html" />
    <id>https://heuna-kim.net/posts/2020-09-14-Hakyll-Blog-Migration.html</id>
    <published>2020-09-14T00:00:00Z</published>
    <updated>2020-09-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Other old notes will be updated sooner or later.</p>]]></summary>
</entry>
<entry>
    <title>Paper Review for Photo-Realistic Single Image Super-Resolution (SISR) Using a GAN</title>
    <link href="https://heuna-kim.net/posts/2018-10-17-PaperReview-SISR-GAN.html" />
    <id>https://heuna-kim.net/posts/2018-10-17-PaperReview-SISR-GAN.html</id>
    <published>2018-10-17T00:00:00Z</published>
    <updated>2018-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1609.04802">Link:Paper</a></p>
<h4 id="main-contribution">Main Contribution</h4>
<ul>
<li>SRResNet : set a new best benchmark result for SISR for PSNR measure</li>
<li>SRGAN:
<ul>
<li>Content loss: a variant of pixel-wise loss depending on the network feature map</li>
<li>Adversarial loss: the probability of the discriminator over all training samples \[ l_{Gen}^{SR} = \sum_{n=1}^N - log D_{\theta_D}(G_{\theta_G}(I^{LR})) \]</li>
<li>GAN based minmax between generated and original \[ \min_{\theta_G} \max_{\theta_D} E_{I^{HR} \sim p_{train}(I^{HR})} [\log D_{\theta_D}(I^{HR})] + E_{I^{LR} \sim p_G(I^{LR})} [\log(1- D_{\theta_D}(G_{\theta_G}(I^{HR})))] \]</li>
<li>performance improvement on MOS testing by a far margin</li>
</ul></li>
</ul>
<h4 id="relevant-terminologies-to-understand">Relevant Terminologies to understand</h4>
<ul>
<li>perceptual similarity</li>
<li>SSIM - structural similarity</li>
<li>PSNR - peak signal-to-noise ratio</li>
<li>MOS - mean opinion score</li>
<li>Wilcoxon signed-rank tests</li>
<li>Parametric ReLu</li>
</ul>
<h4 id="interesting-relevant-work">Interesting Relevant Work</h4>
<ul>
<li><a href="https://pdfs.semanticscholar.org/a286/af401232dcf181af6790873d92585a85f370.pdf">SISR benchmarks</a></li>
<li><a href="https://link.springer.com/article/10.1007/s00138-014-0623-4">SR survey</a></li>
<li><a href="https://arxiv.org/abs/1511.06434">GAN guideline</a></li>
<li><a href="http://people.duke.edu/~sf59/srfinal.pdf%20https://pdfs.semanticscholar.org/938c/a67787b1eb942648f7640c4c07994a0d74de.pdf">multi SR</a></li>
<li><a href="http://torch.ch/blog/2016/02/04/resnets.html">Resnet guideline</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Satellite Analysis Pitch - Applying Depth Estimation Network</title>
    <link href="https://heuna-kim.net/posts/2017-11-08-Satellite-Analysis-Pitch.html" />
    <id>https://heuna-kim.net/posts/2017-11-08-Satellite-Analysis-Pitch.html</id>
    <published>2017-11-08T00:00:00Z</published>
    <updated>2017-11-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have given this talk on 8th November 2017.</p>
<p>This talk was given before I started working professionally on satellite data - by then I didn’t know many critical concepts, for example, orthorectification and more.</p>
<p>This talk contains:</p>
<ul>
<li>playing with Sentinel and Landsat imagery via direct access through AWS</li>
<li>RGB stacking and manipulation of imagery with ImageMagick</li>
<li>playing with open NRW LiDAR data</li>
<li>planning of applying depth estimation</li>
</ul>
<p>The slides: <a href="https://github.com/hahey/Talks/blob/main/Satellite_Analysis_Pitch_2017/Satellite_Nov.pdf">here</a></p>
<p>Please contact me if you have any followup questions.</p>
<p>You can find my other technical talks in the github repo <a href="https://github.com/hahey/Talks">hahey/Talks</a>.</p>]]></summary>
</entry>
<entry>
    <title>Normalization Techniques in Deep Neural Networks</title>
    <link href="https://heuna-kim.net/posts/2017-03-20-PaperReview-Normalization.html" />
    <id>https://heuna-kim.net/posts/2017-03-20-PaperReview-Normalization.html</id>
    <published>2017-03-20T00:00:00Z</published>
    <updated>2017-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The note contains the concept of <code>covariance shift</code> and compares the following normalization techniques in deep learning.</p>
<ul>
<li>batch normalization</li>
<li>dropout</li>
<li>layer normalization</li>
<li>weight normalization</li>
<li>skip connection</li>
</ul>
<p><a href="/pdfs/normalization_handwriting.pdf">here is the handwritten note</a></p>]]></summary>
</entry>

</feed>
