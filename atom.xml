<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Monotonically Increasing Happiness</title>
    <link href="https://heuna-kim.net/atom.xml" rel="self" />
    <link href="https://heuna-kim.net" />
    <id>https://heuna-kim.net/atom.xml</id>
    <author>
        <name>Heuna Kim</name>
        <email>ai@heuna-kim.net</email>
    </author>
    <updated>2020-11-19T00:00:00Z</updated>
    <entry>
    <title>Dynamic Sidebar or Header Activation based on the Current Page in Hakyll</title>
    <link href="https://heuna-kim.net/posts/2020-11-19-Hakyll-Sidebar-Activation.html" />
    <id>https://heuna-kim.net/posts/2020-11-19-Hakyll-Sidebar-Activation.html</id>
    <published>2020-11-19T00:00:00Z</published>
    <updated>2020-11-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="situation">Situation</h2>
<p><a href="https://jaspervdj.be/hakyll/">Hakyll</a> is a haskell-based static site generator that is used to generate my blog. For the migration I ported <a href="https://github.com/poole/lanyon">Lanyon</a> theme designed for Jekyll to <a href="https://github.com/hahey/lanyon-hakyll">lanyon-hakyll</a> and here I describe one of the problems that I encountered.</p>
<p>The problem is an extension of what is described in this blog: <a href="http://mesokurtosis.com/posts/2015-02-22-pages.html">Hakyll, where am I?</a></p>
<p>The page that you are navigating will be linked to one in your sidebar or your header depending on your layout unless it is one of posts. It is possible to statically link each of such pages manually. But if this list of pages is dynamically generated by loading all pages in some folder (e.g.Â in the <code>pages</code> folder in <a href="https://github.com/hahey/lanyon-hakyll">lanyon-hakyll</a>), it gets somewhat more complicated in Hakyll for the following reason.</p>
<p>An example based on liquid syntax in ruby for such activation will look like (the excerpt from <a href="https://github.com/poole/lanyon/blob/master/_includes/sidebar.html">Lanyon</a>):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb1-1" title="1">{% for node in pages_list %}</a>
<a class="sourceLine" id="cb1-2" title="2">    {% if node.title != null %}</a>
<a class="sourceLine" id="cb1-3" title="3">          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item{% if page.url == node.url %} active{% endif %}&quot;</span><span class="ot"> href=</span><span class="st">&quot;{{ node.url | absolute_url }}&quot;</span><span class="kw">&gt;</span>{{ node.title }}<span class="kw">&lt;/a&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4">    {% endif %}</a>
<a class="sourceLine" id="cb1-5" title="5">{% endfor %}</a></code></pre></div>
<p>A direct translation of <code class="sourceCode html">{% if page.url == node.url %}</code> in Hakyll is not possible, because the control flow of Hakyll <code class="sourceCode html">$if(variable)$</code> does not evaluate the boolean value of <code>variable</code> but merely checks whether the key <code>variable</code> exists in the current context or not. Check out <a href="https://jaspervdj.be/hakyll/tutorials/04-compilers.html">this tutorial</a> for understanding the control flow of Hakyll templates.</p>
<h2 id="approaching-the-solution">Approaching the Solution</h2>
<p>We will dynamically generate this <code>constField</code> having the page title as a key in the context of <code>listField</code> with a key <code>pages_list</code>. First we add a snapshot to avoid a dependency cycle in compiling the <code>pages</code> folder:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"> match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="op">...</span></a>
<a class="sourceLine" id="cb2-3" title="3">    pandocCompiler</a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="op">...</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></a></code></pre></div>
<p>Define the context containing such <code>listField</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="ot">sidebarCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-2" title="2">sidebarCtx nodeCtx <span class="ot">=</span></a>
<a class="sourceLine" id="cb3-3" title="3">    listField <span class="st">&quot;pages_list&quot;</span> nodeCtx (loadAllSnapshots <span class="st">&quot;pages/*&quot;</span> <span class="st">&quot;page-content&quot;</span>) <span class="ot">`mappend`</span></a>
<a class="sourceLine" id="cb3-4" title="4">    defaultContext</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="ot">baseNodeCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-7" title="7">baseNodeCtx <span class="ot">=</span></a>
<a class="sourceLine" id="cb3-8" title="8">    urlField <span class="st">&quot;node-url&quot;</span> <span class="ot">`mappend`</span></a>
<a class="sourceLine" id="cb3-9" title="9">    titleField <span class="st">&quot;title&quot;</span> <span class="ot">`mappend`</span></a>
<a class="sourceLine" id="cb3-10" title="10">    baseCtx</a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12">baseSidebarCtx <span class="ot">=</span> sidebarCtx baseNodeCtx</a></code></pre></div>
<p>Add dynamically generated <code>constField</code> with the current page title.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="co">--- This is not enough.</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">import</span>           <span class="dt">System.FilePath</span>               (takeBaseName)</a>
<a class="sourceLine" id="cb4-3" title="3"></a>
<a class="sourceLine" id="cb4-4" title="4">match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-5" title="5">    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></a>
<a class="sourceLine" id="cb4-6" title="6">    compile <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-7" title="7">        pageName <span class="ot">&lt;-</span> takeBaseName <span class="op">.</span> toFilePath <span class="op">&lt;$&gt;</span> getUnderlying</a>
<a class="sourceLine" id="cb4-8" title="8">        <span class="kw">let</span> pageCtx <span class="ot">=</span> constField pageName <span class="st">&quot;&quot;</span> <span class="ot">`mappend`</span></a>
<a class="sourceLine" id="cb4-9" title="9">                      baseNodeCtx</a>
<a class="sourceLine" id="cb4-10" title="10">        <span class="kw">let</span> activeSidebarCtx <span class="ot">=</span> sidebarCtx pageCtx</a>
<a class="sourceLine" id="cb4-11" title="11"></a>
<a class="sourceLine" id="cb4-12" title="12">        pandocCompiler</a>
<a class="sourceLine" id="cb4-13" title="13">            <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></a>
<a class="sourceLine" id="cb4-14" title="14">            <span class="op">...</span></a>
<a class="sourceLine" id="cb4-15" title="15">            <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (activeSidebarCtx <span class="op">&lt;&gt;</span> siteCtx)</a>
<a class="sourceLine" id="cb4-16" title="16">            <span class="op">&gt;&gt;=</span> relativizeUrls</a></code></pre></div>
<p>The translation of the above html layout will be similar to:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb5-1" title="1"><span class="co">&lt;!-- THIS DOES NOT WORK --&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2">$for(pages_list)$</a>
<a class="sourceLine" id="cb5-3" title="3">    $if(title)$</a>
<a class="sourceLine" id="cb5-4" title="4">          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item$if($title$)$ active$endif$&quot;</span><span class="ot"> href=</span><span class="st">&quot;$baseurl$$node-url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5">    $endif$</a>
<a class="sourceLine" id="cb5-6" title="6">$endfor$</a></code></pre></div>
<p>As you see in the comment, this is not enough because inside of <code class="sourceCode html">$if(...)$</code> syntax, you cannot evaluate the key by surrounding them with <code>$</code>.</p>
<h2 id="solution">Solution</h2>
<p>We can add <code>functionField</code> for evaluating a key for a given context. The <code>functionField</code> needs a function with a type <code>[String] -&gt; Item String -&gt; Compiler String</code>.</p>
<p>We define the following <code>evalCtxKey</code> function for this purpose:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="ot">evalCtxKey ::</span> <span class="dt">Context</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb6-2" title="2">evalCtxKey context [key] item <span class="ot">=</span> (unContext context key [] item) <span class="op">&gt;&gt;=</span> \cf <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3">        <span class="kw">case</span> cf <span class="kw">of</span></a>
<a class="sourceLine" id="cb6-4" title="4">            <span class="dt">StringField</span> s <span class="ot">-&gt;</span> <span class="fu">return</span> s</a>
<a class="sourceLine" id="cb6-5" title="5">            _             <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="op">$</span> <span class="st">&quot;Internal error: StringField expected&quot;</span></a></code></pre></div>
<p>Just if you need, you can also access the meta data as follows:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="ot">getMetadataKey ::</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb7-2" title="2">getMetadataKey [key] item <span class="ot">=</span> getMetadataField&#39; (itemIdentifier item) key</a></code></pre></div>
<p>The functions <code>unContext</code>, <code>getMetadataField'</code>, and data <code>itemIdentifier</code> are already defined in Hakyll.</p>
<p>The following is the working version of compiling <code>pages/*</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource haskell numberLines"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1">match <span class="st">&quot;pages/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-2" title="2">    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></a>
<a class="sourceLine" id="cb8-3" title="3">    compile <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-4" title="4">        pageName <span class="ot">&lt;-</span> takeBaseName <span class="op">.</span> toFilePath <span class="op">&lt;$&gt;</span> getUnderlying</a>
<a class="sourceLine" id="cb8-5" title="5">        <span class="kw">let</span> pageCtx <span class="ot">=</span> constField pageName <span class="st">&quot;&quot;</span> <span class="ot">`mappend`</span></a>
<a class="sourceLine" id="cb8-6" title="6">                      baseNodeCtx</a>
<a class="sourceLine" id="cb8-7" title="7">        <span class="kw">let</span> evalCtx <span class="ot">=</span> functionField <span class="st">&quot;eval&quot;</span> (evalCtxKey pageCtx)</a>
<a class="sourceLine" id="cb8-8" title="8">        <span class="kw">let</span> activeSidebarCtx <span class="ot">=</span> sidebarCtx (evalCtx <span class="op">&lt;&gt;</span> pageCtx)</a>
<a class="sourceLine" id="cb8-9" title="9"></a>
<a class="sourceLine" id="cb8-10" title="10">        pandocCompiler</a>
<a class="sourceLine" id="cb8-11" title="11">            <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;page-content&quot;</span></a>
<a class="sourceLine" id="cb8-12" title="12">            <span class="op">...</span></a>
<a class="sourceLine" id="cb8-13" title="13">            <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (activeSidebarCtx <span class="op">&lt;&gt;</span> siteCtx)</a>
<a class="sourceLine" id="cb8-14" title="14">            <span class="op">&gt;&gt;=</span> relativizeUrls</a></code></pre></div>
<p>and the sidebar layout:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb9-1" title="1">$for(pages_list)$</a>
<a class="sourceLine" id="cb9-2" title="2">    $if(title)$</a>
<a class="sourceLine" id="cb9-3" title="3">          <span class="kw">&lt;a</span><span class="ot"> class=</span><span class="st">&quot;sidebar-nav-item$if(eval(title))$ active$endif$&quot;</span><span class="ot"> href=</span><span class="st">&quot;$baseurl$$node-url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span></a>
<a class="sourceLine" id="cb9-4" title="4">    $endif$</a>
<a class="sourceLine" id="cb9-5" title="5">$endfor$</a></code></pre></div>
<p>If you want to look at an example code, please check out <a href="https://github.com/hahey/lanyon-hakyll">the codes of lanyon-hakyll</a>.</p>]]></summary>
</entry>
<entry>
    <title>Berlin Machine Learning Seminar - Examples of Reinforcement Learning Applications in the Financial Market</title>
    <link href="https://heuna-kim.net/posts/2020-10-22-BMLSeminar-RL-in-finance.html" />
    <id>https://heuna-kim.net/posts/2020-10-22-BMLSeminar-RL-in-finance.html</id>
    <published>2020-10-22T00:00:00Z</published>
    <updated>2020-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have given this talk on 22nd October 2020 at 19:00 to Berlin Machine Learning Seminar with the following abstract.</p>
<h3 id="abstract">Abstract:</h3>
<blockquote>
<p>Reinforcement Learning has been broadly employed in financial markets for the last few years by benefiting from its nature of combining the behavior optimization (in this case buy and sell) and the market prediction. We will first discuss the hierarchical reinforcement learning scheme deployed by JPMorgan (<a href="https://arxiv.org/abs/1811.09549">arXiv</a>, NIPS Workshop 2018) and then take a look at other two examples of DRL applied in trading. The first one (<a href="https://arxiv.org/abs/1908.02646">arXiv</a>, KDD 2019) is implementing an interpretable network that works similar to a traditional trading strategy (Buying-Winners-and-Selling-Losers). The second one (<a href="https://arxiv.org/pdf/1906.11046">arXiv</a>, ICML 2019) is extending a traditional mathematical model (the Almgren and Chriss model) to a multi-agent setting in order to optimize a liquidation strategy.</p>
</blockquote>
<p>The slides: <a href="https://github.com/hahey/Talks/blob/main/Berlin_Machine_Learning_Seminar_20201022/BML_RLTrading_hkim.pdf">here</a></p>
<p>Please contact me if you have any followup questions.</p>
<p>You can find my other technical talks in the github repo <a href="https://github.com/hahey/Talks">hahey/Talks</a>.</p>]]></summary>
</entry>
<entry>
    <title>Migrated notes and the webpage using Hakyll</title>
    <link href="https://heuna-kim.net/posts/2020-09-14-hakyll-blog-migration.html" />
    <id>https://heuna-kim.net/posts/2020-09-14-hakyll-blog-migration.html</id>
    <published>2020-09-14T00:00:00Z</published>
    <updated>2020-09-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Other old notes will be updated sooner or later.</p>]]></summary>
</entry>
<entry>
    <title>Paper Review for Photo-Realistic Single Image Super-Resolution (SISR) Using a GAN</title>
    <link href="https://heuna-kim.net/posts/2018-10-17-PaperReview-SISR-GAN.html" />
    <id>https://heuna-kim.net/posts/2018-10-17-PaperReview-SISR-GAN.html</id>
    <published>2018-10-17T00:00:00Z</published>
    <updated>2018-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1609.04802">Link:Paper</a></p>
<h4 id="main-contribution">Main Contribution</h4>
<ul>
<li>SRResNet : set a new best benchmark result for SISR for PSNR measure</li>
<li>SRGAN:
<ul>
<li>Content loss: a variant of pixel-wise loss depending on the network feature map</li>
<li>Adversarial loss: the probability of the discriminator over all training samples \[ l_{Gen}^{SR} = \sum_{n=1}^N - log D_{\theta_D}(G_{\theta_G}(I^{LR})) \]</li>
<li>GAN based minmax between generated and original \[ \min_{\theta_G} \max_{\theta_D} E_{I^{HR} \sim p_{train}(I^{HR})} [\log D_{\theta_D}(I^{HR})] + E_{I^{LR} \sim p_G(I^{LR})} [\log(1- D_{\theta_D}(G_{\theta_G}(I^{HR})))] \]</li>
<li>performance improvement on MOS testing by a far margin</li>
</ul></li>
</ul>
<h4 id="relevant-terminologies-to-understand">Relevant Terminologies to understand</h4>
<ul>
<li>perceptual similarity</li>
<li>SSIM - structural similarity</li>
<li>PSNR - peak signal-to-noise ratio</li>
<li>MOS - mean opinion score</li>
<li>Wilcoxon signed-rank tests</li>
<li>Parametric ReLu</li>
</ul>
<h4 id="interesting-relevant-work">Interesting Relevant Work</h4>
<ul>
<li><a href="https://pdfs.semanticscholar.org/a286/af401232dcf181af6790873d92585a85f370.pdf">SISR benchmarks</a></li>
<li><a href="https://link.springer.com/article/10.1007/s00138-014-0623-4">SR survey</a></li>
<li><a href="https://arxiv.org/abs/1511.06434">GAN guideline</a></li>
<li><a href="http://people.duke.edu/~sf59/srfinal.pdf%20https://pdfs.semanticscholar.org/938c/a67787b1eb942648f7640c4c07994a0d74de.pdf">multi SR</a></li>
<li><a href="http://torch.ch/blog/2016/02/04/resnets.html">Resnet guideline</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Satellite Analysis Pitch - Applying Depth Estimation Network</title>
    <link href="https://heuna-kim.net/posts/2017-11-08-Satellite-Analysis-Pitch.html" />
    <id>https://heuna-kim.net/posts/2017-11-08-Satellite-Analysis-Pitch.html</id>
    <published>2017-11-08T00:00:00Z</published>
    <updated>2017-11-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have given this talk on 8th November 2017.</p>
<p>This talk was given before I started working professionally on satellite data - by then I didnât know many critical concepts, for example, orthorectification and more.</p>
<p>This talk contains:</p>
<ul>
<li>playing with Sentinel and Landsat imagery via direct access through AWS</li>
<li>RGB stacking and manipulation of imagery with ImageMagick</li>
<li>playing with open NRW LiDAR data</li>
<li>planning of applying depth estimation</li>
</ul>
<p>The slides: <a href="https://github.com/hahey/Talks/blob/main/Satellite_Analysis_Pitch_2017/Satellite_Nov.pdf">here</a></p>
<p>Please contact me if you have any followup questions.</p>
<p>You can find my other technical talks in the github repo <a href="https://github.com/hahey/Talks">hahey/Talks</a>.</p>]]></summary>
</entry>
<entry>
    <title>Normalization Techniques in Deep Neural Networks</title>
    <link href="https://heuna-kim.net/posts/2017-03-20-PaperReview-Normalization.html" />
    <id>https://heuna-kim.net/posts/2017-03-20-PaperReview-Normalization.html</id>
    <published>2017-03-20T00:00:00Z</published>
    <updated>2017-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The note contains the concept of <code>covariance shift</code> and compares the following normalization techniques in deep learning.</p>
<ul>
<li>batch normalization</li>
<li>dropout</li>
<li>layer normalization</li>
<li>weight normalization</li>
<li>skip connection</li>
</ul>
<p><a href="/pdfs/normalization_handwriting.pdf">here is the handwritten note</a></p>]]></summary>
</entry>

</feed>
